name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHONPATH: ${{ github.workspace }}/src

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, macos-12]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to reduce CI load
          - os: macos-12
            python-version: "3.8"
          - os: macos-12
            python-version: "3.12"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Ensure osascript is available (should be by default on macOS)
        which osascript || echo "osascript not found"
        
        # Install any other macOS-specific dependencies if needed
        brew list --formula | grep -q osascript || echo "AppleScript support available"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev,test]"

    - name: Verify installation
      run: |
        python -c "import src.things_mcp; print('Package imported successfully')"
        python -m pytest --version
        python -m coverage --version

    - name: Run linting
      run: |
        echo "Running code formatting check..."
        python -m black --check src/ tests/ || echo "Black formatting check failed"
        
        echo "Running import sorting check..."
        python -m isort --check-only src/ tests/ || echo "Import sorting check failed"
        
        echo "Running flake8 linting..."
        python -m flake8 src/ tests/ || echo "Flake8 linting failed"

    - name: Run type checking
      run: |
        echo "Running mypy type checking..."
        python -m mypy src/things_mcp --ignore-missing-imports || echo "Type checking completed with issues"

    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        python -m pytest tests/unit/ \
          --cov=src/things_mcp \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          --junitxml=junit-unit.xml \
          -v

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        python -m pytest tests/integration/ \
          --junitxml=junit-integration.xml \
          -v

    - name: Run all tests with coverage
      run: |
        echo "Running complete test suite..."
        python -m pytest tests/ \
          --cov=src/things_mcp \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=75 \
          --junitxml=junit-all.xml \
          -v \
          --tb=short

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'macos-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit-*.xml
          htmlcov/
          coverage.xml

    - name: Test CLI interface
      run: |
        echo "Testing CLI interface..."
        python -m src.things_mcp --help || echo "CLI help command test completed"

  security:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run security analysis with bandit
      run: |
        echo "Running bandit security analysis..."
        python -m bandit -r src/ -f json -o bandit-report.json || echo "Bandit analysis completed"
        python -m bandit -r src/ || echo "Bandit analysis completed"

    - name: Check dependencies for known vulnerabilities
      run: |
        echo "Checking dependencies for vulnerabilities..."
        python -m safety check --json --output safety-report.json || echo "Safety check completed"
        python -m safety check || echo "Safety check completed"

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  compatibility:
    runs-on: macos-latest
    strategy:
      matrix:
        things-version: ["3.20", "3.19", "3.18"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Test AppleScript compatibility
      run: |
        echo "Testing AppleScript compatibility for Things ${{ matrix.things-version }}"
        # Note: This would require actual Things 3 installation and version management
        # For now, we'll run tests that don't require Things 3
        python -m pytest tests/unit/test_applescript_manager.py -v -m "not applescript"

  performance:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        pip install pytest-benchmark memory-profiler

    - name: Run performance tests
      run: |
        echo "Running performance benchmarks..."
        python -m pytest tests/ \
          -m "not slow" \
          --benchmark-only \
          --benchmark-json=benchmark.json || echo "Performance tests completed"

    - name: Memory profiling
      run: |
        echo "Running memory profiling..."
        python -m memory_profiler -m pytest tests/unit/test_models.py -v || echo "Memory profiling completed"

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: |
          benchmark.json
          .prof

  docs:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Check documentation
      run: |
        echo "Checking documentation..."
        # Check for basic documentation files
        test -f README.md || echo "README.md not found"
        test -f docs/README.md || echo "docs/README.md not found"
        
        # Validate docstrings
        python -c "
        import src.things_mcp.server
        import src.things_mcp.models
        import src.things_mcp.tools
        print('Basic imports successful')
        "

  test-runner:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Test test runner script
      run: |
        echo "Testing test runner script..."
        cd ${{ github.workspace }}
        
        python tests/test_runner.py list
        python tests/test_runner.py clean
        python tests/test_runner.py unit --verbose
        python tests/test_runner.py integration --verbose
        
        echo "Test runner script validation completed"

  notify:
    runs-on: macos-latest
    needs: [test, security, compatibility, performance, docs, test-runner]
    if: always()
    steps:
    - name: Notify results
      run: |
        echo "Test suite completed!"
        echo "Test job status: ${{ needs.test.result }}"
        echo "Security job status: ${{ needs.security.result }}"
        echo "Compatibility job status: ${{ needs.compatibility.result }}"
        echo "Performance job status: ${{ needs.performance.result }}"
        echo "Docs job status: ${{ needs.docs.result }}"
        echo "Test runner job status: ${{ needs.test-runner.result }}"